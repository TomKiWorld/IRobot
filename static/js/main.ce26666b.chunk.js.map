{"version":3,"sources":["components/ErrorBoundry/ErrorBoundry.js","components/Header/Header.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/Card/Card.js","components/CardList/CardList.js","containers/Robots/Robots.js","components/Footer/Footer.js","containers/MainPage/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ErrorBoundry","props","state","hasError","this","setState","children","Component","Header","onRouteChange","resetSearch","resetName","className","onClick","SearchBox","searchChange","aria-label","type","placeholder","onChange","event","target","value","Scroll","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","Robots","isPending","onSearchChange","filteredRobots","Footer","href","rel","Personal","React","lazy","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","renderContent","route","fallback","onNameChange","onRequestRobots","App","connect","searchRobots","requestRobots","error","setRoute","setName","dispatch","text","payload","setSearchField","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initalStateSearch","initalStateRobots","initalRoute","initalName","middlewares","createLogger","thunkMiddleware","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ce26666b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n      this.state = { hasError: false }\n  }\n  \n  componentDidCatch() {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. Soemthing went wrong</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\n\nconst Header = ({ onRouteChange, resetSearch, resetName }) => {\n  return (\n    <header>\n      <nav className='main-nav'>\n        <button \n          className='bg-light-green br3 pa3 ma1 bw0 grow'\n          onClick={() => {\n            onRouteChange('list');\n            resetName('');\n            }}\n          >Robots list</button>\n        <button \n          className='bg-light-green br3 pa3 ma1 bw0 grow'\n          onClick={() => {\n            onRouteChange('personal');\n            resetSearch('');\n            }}\n        >Personal Robot</button>\n      </nav>\n      <h1 className='sega title'>IRobot</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='search-robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={(event) => searchChange(event.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div className='scroll br3'>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card/Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport Scroll from '../../components/Scroll/Scroll';\nimport ErrorBoundry from '../../components/ErrorBoundry/ErrorBoundry';\nimport CardList from '../../components/CardList/CardList';\n\nconst Robots = ({ isPending, onSearchChange, filteredRobots }) => {\n  return (\n    <main className='container'>\n      <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n        { isPending ? <h1>Loading</h1> :\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry> \n        }\n        </Scroll>\n    </main>\n  );\n};\n\nexport default Robots;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className='site-footer bg-light-green'>\n      <p>Made with <span>&hearts;</span> by <a href='https://github.com/TomKiWorld' target='_blank' rel='noopener noreferrer'>TomKiWorld</a></p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component, Suspense } from 'react';\n\nimport Header from '../../components/Header/Header';\nimport Robots from '../Robots/Robots';\nimport Footer from '../../components/Footer/Footer';\n\nconst Personal= React.lazy(() => import('../Personal/Personal'));\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = (robots) => {\n    return robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n    })\n  };\n\n  renderContent = (route) => {    \n    switch(route) {\n      case 'personal':\n        return(\n          <Suspense fallback={<div>Loading...</div>}>\n            <Personal \n              onNameChange={this.props.onNameChange}\n              name={this.props.name}\n            />\n          </Suspense>\n        );\n      default:\n        return(\n          <Robots \n            isPending={this.props.isPending}\n            onSearchChange={this.props.onSearchChange}\n            filteredRobots={this.filterRobots(this.props.robots)}\n          />\n        );\n    }\n  }\n\n  render() {\n    const { onSearchChange, onRouteChange, onNameChange, route } = this.props;\n    \n    return (\n      <article className='tc'>\n        <Header \n          onRouteChange={onRouteChange}\n          resetSearch={onSearchChange}\n          resetName={onNameChange}\n        />\n        {this.renderContent(route)}\n        <Footer />\n      </article>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots, setRoute, setName } from '../actions';\n\nimport './App.css';\nimport MainPage from './MainPage/MainPage';\n\n// Parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n    route: state.setRoute.route,\n    name: state.setName.name\n  }\n}\n\n// Dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (text) => dispatch(setSearchField(text)),\n    onRequestRobots: () => dispatch(requestRobots()),\n    onRouteChange: (text) => dispatch(setRoute(text)),\n    onNameChange: (text) => dispatch(setName(text))\n  }\n}\n\nclass App extends Component {\n  render() {\n    return <MainPage { ...this.props }/>;\n  }\n}\n\n// Action done from mapDispatchToProps will change state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  CHANGE_ROUTE,\n  SET_NAME\n} from './constants';\n\nexport const setSearchField = text => ({ type: CHANGE_SEARCH_FIELD, payload: text });\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  return fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n};\n\nexport const setRoute = text => ({ type: CHANGE_ROUTE, payload: text });\n\nexport const setName = text => ({ type: SET_NAME, payload: text });\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport const CHANGE_ROUTE = 'CHANGE_ROUTE';\n\nexport const SUBMIT_NAME = 'SUBMIT_NAME';\nexport const SET_NAME = 'SET_NAME';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  CHANGE_ROUTE,\n  SET_NAME\n} from './constants';\n\nconst initalStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state=initalStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initalStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initalStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true};\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false};\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false};\n    default:\n      return state;\n  }\n}\n\nconst initalRoute = {\n  route: 'list'\n};\n\nexport const setRoute = (state=initalRoute, action={}) => {\n  switch(action.type) {\n    case CHANGE_ROUTE:\n      return { ...state, route: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initalName = {\n  name: ''\n};\n\nexport const setName = (state=initalName, action={}) => {\n  switch(action.type) {\n    case SET_NAME:\n      return { ...state, name: action.payload };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots, setRoute, setName } from './reducers';\n\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger();\n\nconst middlewares = [ thunkMiddleware ];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger)\n}\n\nconst rootReducer = combineReducers({searchRobots, requestRobots, setRoute, setName})\nconst store = createStore( rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}